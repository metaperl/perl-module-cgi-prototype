=head1 NAME

  CGI::Prototype::Moose - Create a CGI application with Moose

=head1 SYNOPSIS

In F<WebApp.pm>

  package WebApp;
  use base qw/CGI::Prototype::Moose/;
  1;

In F<webapp.cgi>

  WebApp->activate;

=head1 DESCRIPTION

This is a Moose implementation of
L<CGI::Prototype|CGI::Prototype>. The original implementation of
CGI::Prototype was by Randal Schwartz and used prototype-based
objects. 

The usage of this module is the same, but being implemented in Moose,
it gains a smorgasboard of object-oriented techniques for web
application development.

=head2 Philosophy

The core of every CGI application seems to be roughly the same:

=over 4

=item *

Analyze the incoming parameters, cookies, and URLs to determine the
state of the application (let's call this "dispatch").

=item *

Based on the current state, analyze the incoming parameters to respond
to any form submitted ("respond").

=item *

From there, decide what response page should be generated, and produce
it ("render").

=back

L<CGI::Prototype>, unlike most web app frameworks requires that
each controller to be in a separate class. This results in fine-grained control
and scaleability over all aspects of the CGI request cycle, with a
simple example shown here:

L<http://perlmonks.org/?node_id=786745|http://perlmonks.org/?node_id=786745>.

=head1 ATTRIBUTES

L<CGI::Prototype::Moose> implements the following attributes.


=head2 C<request> (lazy)

Provides a L<Mojo::Message::Request> instance suitable for processing
HTTP request data.

=head3 C<CGI> (lazy)

If you prefer a L<CGI::Simple> API for processing HTTP request data,
then use this attribute instead. 

=head2 C<response> (lazy)

Provides a L<Mojo::Message::Response> instance. This is used to
provide our HTTP response. By default, it sets the content type to
C<text/html>.

The C<prototype_leave()> method sets C<< $self->response->body >> to the 
value of C<output> attribute, which is normally bound during the
C<render()> method

=head2 C<log> (lazy)

Provides a L<Mojo::Log> instance which logs to STDERR by
default. Standard L<Moose> techniques for overriding/modifying a
builder method allow for other logging options, or complete
replacement by a more heavy-duty solution such L<Log::Dispatch>.

=head2 C<output>

This is where you store any output you want returned in the HTTP body.

=head2 C<engine> (lazy)

This creates an instance of your templating engine. By default it
creates a L<Template Toolkit|Template> engine. 

Because L<Mojo> is a prerequisite for L<CGI::Prototype::Moose>,
L<Mojo::Template> is also available for your use.

=head2 C<engine_config> (lazy)

This is where you construct the parameters that will be supplied to
the constructor of your engine. By default it returns an empty
hashref. 

=head2 C<template> (lazy)

This is where you provide a text string that your L</engine> will
process in L</render>

The default attribute builds a template document object (something compatible to the
L<Template> C<process> method, such as a L<Template::Document> or a
filehandle or a reference to a scalar).  The default is a simple "this
page intentionally left blank" string template.

When rendered, the B<only> extra global variable passed into the
template is the C<self> variable, representing the controller object.
However, as seen earlier, this is sufficient to allow access to
anything you need from the template, thanks to Template Toolkit's
ability to call methods on an object and understand the results.

For example, to get at the C<barney> parameter:

  The barney field is [% self.param("barney") | html %].

=head1 METHODS

=head2 C<activate>

Invoke the C<activate> slot to "activate" your application,
causing it to process the incoming CGI values, select a page to be
respond to the parameters, which in turn selects a page to render, and
then responds with that page.  For example, your App might consist
only of:

  package My::App;
  use base qw(CGI::Prototype);
  My::App->activate;

Again, this will not be interesting, but it shows that the null app
is easy to create.  Almost always, you will want to override some
of the "callback" slots below.

It turns out it is easier to simply look at the source of C<activate> 
than to explain it. So here it is:

  sub activate {
    my $self = shift;
    eval {
      $self->prototype_enter;
      $self->app_enter;
      my $this_page = $self->dispatch;
      $this_page->control_enter;
      $this_page->respond_enter;
      my $next_page = $this_page->respond;
      $this_page->respond_leave;
      if ($this_page ne $next_page) {
        $this_page->control_leave;
        $next_page->control_enter;
      }
    $next_page->render_enter;
    $next_page->render;
    $next_page->render_leave;
    $next_page->control_leave;
    $self->app_leave;
    $self->prototype_leave;
   };
   $self->error($@) if $@;	
  }

=head3 C<prototype_enter>

Called when the prototype mechanism is entered, at the very beginning
of each hit.  

=head3 C<app_enter>

Called when the application is entered, at the very beginning of each
hit.  Defaults to no action.

=head3 C<dispatch>

Called to analyze the incoming parameters to define which page object
gets control based on the incoming CGI parameters.

This callback B<must return> a page object (the object taking control
during the response phase).  By default, this callback returns the
application itself.

=head3 C<control_enter>

Called when a page gains control, either at the beginning for a
response, or in the middle when switched for rendering.  Defaults to
nothing.

This is a great place to hang per-page initialization, because you'll
get this callback at most once per hit.

=head3 C<respond_enter>

Called when a page gains control specifically for responding
(understanding the incoming parameters, and deciding what page should
render the response), just after C<control_enter>.

=head3 C<respond>

Called to determine how to respond specifically to this set of
incoming parameters.  Probably updates databases and such.

This callback B<must return> a page object (the object taking control
during the render phase).  By default, this callback returns the same
object that had control during the response phase ("stay here" logic),
which works most of the time.

=head3 C<respond_leave>

Called when a page loses control specifically for rendering
(understanding the incoming parameters, and deciding what page should
render the response), just before C<control_leave> (if needed).

=head3 C<render_enter>

Called when a page gains control specifically for rendering, just
after C<control_enter>. 


=head3 C<render>

The C<render()> method uses the results from applying L</engine> to a L</template>
By default the results of C<render()> are stored in L</output> and
spit back to the webserver in L</prototype_leave>.

Again, because CGIP uses such clear object-oriented logic, it is
easier to show the code than talk about it. Here is the default render method:

  sub render {
    my $self = shift;
    my $tt = $self->engine;
  
    $tt->process($self->template, { self => $self }, \my $output)
      or die $tt->error;	
    $self->output($output);
  }

=head3 C<render_leave>

Called when a page loses control specifically for rendering (delivering
text to the browser), just before C<control_leave>.



=head3 C<control_leave>

Called when a page loses control, either after a response phase
because we're switching to a new page, or render phase after we've
delivered the new text to the browser.

This is a great place to hang per-page teardown, because you'll get
this callback at most once per hit.

=head3 C<app_leave>

Called when the application is left, at the very end of each hit.
Defaults to no action.

=head3 C<prototype_leave>

Called when the prototype mechanism is exited, at the very end of each hit.

It binds L</output> to C<< $self->response->body >> and then prints
it to STDOUT.

=head2 C<error>

Called if an uncaught error is triggered in any of the other steps,
passing the error text or object as the first method parameter.  The
default callback simply displays the output to the browser, which is
highly insecure and should be overridden, perhaps with something that
logs the error and puts up a generic error message with an incident
code for tracking.

=head3 C<display>

This routine simply prints to STDOUT. It is used by L</error> to print
output when the standard L</activate> procedure is interrupted with an
exception.


=head2 C<param> (lazy)

The C<param> method is a convenience method that maps to
C<< $self->CGI->param >>, because accessing params is a very common thing.

=head1 SUPPORT

=head2 Mailing List

You may sign up for the mailing list here:
L<https://lists.sourceforge.net/lists/listinfo/cgi-prototype-users>

The mailing list is archived at
L<http://www.mail-archive.com/cgi-prototype-users@lists.sourceforge.net/index.html>


=head1 DEVELOPMENT

=head2 Source repo

Randal Schwartz maintains the source repo on github:
L<http://github.com/RandalSchwartz/perl-module-cgi-prototype/tree/master>

Terrence Brannon has forked Randal's repo for the Moose/Mojo implementation:
L<http://github.com/metaperl/perl-module-cgi-prototype/tree/master>


=head1 SEE ALSO

L<Moose>, L<Mojo>, L<CGI::Prototype>, L<http://www.stonehenge.com/merlyn/LinuxMag/col56.html>.



=head1 AUTHOR

Terrence Brannon

Many thanks to Sebastian Riedel for his help with L<Mojo>.


